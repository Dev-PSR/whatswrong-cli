#!/usr/bin/env bash

# -----------------------------------------
# whatswrong.sh
# One-command diagnostic tool for devs
# Checks for common project setup issues
# Author: YourName
# License: MIT
# -----------------------------------------

set -euo pipefail
IFS=$'\n\t'

# Colors
RED=$(tput setaf 1)
GRN=$(tput setaf 2)
YEL=$(tput setaf 3)
CYN=$(tput setaf 6)
RST=$(tput sgr0)

# Status formatters
ok()   { echo "${GRN}[✓]${RST} $1"; }
warn() { echo "${YEL}[!]${RST} $1"; }
err()  { echo "${RED}[✗]${RST} $1"; }

# Secure temp file handling
TMPDIR=$(mktemp -d 2>/dev/null || mktemp -d -t 'whatswrong')
trap 'rm -rf "$TMPDIR"' EXIT

# Git check
check_git() {
  if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
    local changes
    changes=$(git status --porcelain)
    if [[ -n "$changes" ]]; then
      warn "Uncommitted Git changes"
    else
      ok "Git working directory is clean"
    fi

    local branch
    branch=$(git symbolic-ref --short HEAD)
    local ahead
    ahead=$(git status -sb | grep -o '\[ahead [0-9]*\]' || true)
    if [[ -n "$ahead" ]]; then
      warn "Local branch '$branch' has unpushed commits"
    else
      ok "Branch '$branch' is up to date"
    fi
  else
    warn "Not a Git repository"
  fi
}

# .env check
check_env() {
  if [[ -f ".env" ]]; then
    ok ".env file exists"
  else
    warn "Missing .env file"
  fi
}

# Python virtual environment check
check_venv() {
  if [[ -d "venv" || -d ".venv" ]]; then
    ok "Python virtual environment found"
  else
    warn "Python virtual environment not found"
  fi
}

# Node modules check
check_node_modules() {
  if [[ -f "package.json" ]]; then
    if [[ -d "node_modules" ]]; then
      ok "node_modules directory exists"
    else
      warn "package.json found but node_modules is missing"
    fi
  fi
}

# Port usage check
check_port() {
  local port=3000
  if command -v lsof >/dev/null; then
    if lsof -i :"$port" | grep -q LISTEN; then
      warn "Port $port is in use"
    else
      ok "Port $port is free"
    fi
  else
    warn "lsof command not found — skipping port check"
  fi
}

# Docker running check
check_docker() {
  if command -v docker >/dev/null; then
    if docker info >/dev/null 2>&1; then
      ok "Docker is running"
    else
      warn "Docker is installed but not running"
    fi
  else
    warn "Docker is not installed"
  fi
}

# Logs check (optional)
check_logs() {
  if [[ -f "logs/error.log" ]]; then
    ok "logs/error.log exists"
  else
    warn "logs/error.log missing"
  fi
}

# Main
main() {
  echo "${CYN}==> Running project diagnostics...${RST}"
  echo

  check_git
  check_env
  check_venv
  check_node_modules
  check_port
  check_docker
  check_logs

  echo
  echo "${CYN}==> Done. Fix warnings above if needed.${RST}"
}

main "$@"
